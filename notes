What kind of operations should be easy?:

Node => header + offsets array + data entries + free block linked list






















TODO: implement free block and node iterators?, start w free blocks

Managing empty cells:

-   Each 'free block' of unused data space in a node
    contains a 4 byte header consisting of 2 bytes for
    the pointer to the next free block and 2 bytes
    for the total size of the free block

-   The node header then includes the offset to the first free block



Key cell vs Key value cell


Key cell = [ key_size | page_id | key_bytes ]
Key/value cell = [ key_size | value_size | key_bytes | value_bytes ]

Use assert_eq??



What kind of methods do I want to be part of the
node struct vs btree operations??


Remember: Abstraction, the node doesn't know about the tree?

Btree ops (Node level):

-   Searching
-   Splitting
-   Merging?
-   Insertion / deletion (delegates node specifics)



Node ops (Pager level: records, headers):

-   Decoding, Inserting, Deleting records
-   Decoding, editing headers
-   Managing pointers within node



B-Tree <--> Pager interaction

# What operations should the pager have
# Who owns what resources (Pager = Page Cache?)
# How does the user communicate to send the (key, value) tuples?

Access / Organization Methods : Btree, Hash


-   Page cache gets given a page number for its operations
-   This page number is provided by the page organization / access method (ex. B+Tree)
-   Each page is also a b tree node


Maximize M

Node header: 

    1. Node type
    2. Offset to start and end of empty space
    5. # of elements stored?

Page Formats:
    Leaf node: 
        1. Node header
        2. Key Reference array:
            
            For each record (key, value) store:
                - the key,
                - the length of the value,
                - the record pointer to the value (offset within page)
    Internal node:
        1. Node header
        2. Key / subtree page id pairs

Okay so:

-   Internal nodes will store more child pointers (B+Tree)
-   Each B-Tree node gets its own page on disk
-   Each node should then maximize the space it takes up within that page
    by modifying the 'm' parameter: https://dl.acm.org/doi/pdf/10.1145/356770.356776
-   Child node pointers are 'page numbers'
-   Node 'keys' are just the actual data record byte array keys entered by the user,
    and compared using some comparison function
-   Record pointers: (page# + offset) tuple


-   Connection, pager, b-tree and operations
-   Store root node along with DB header on first page
-   Root node starts as leaf node before growing


-   Have modules such as initialization, persistence, errors, constants and store the
    main struct definition in mod, 

